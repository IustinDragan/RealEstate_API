@page "/Announcements"
@using RealEstate.Web.Models
@using System.Text
@inject HttpClient Http
@inject NavigationManager NavManager

<!-- link css -->
@* <link rel="stylesheet" href="css/main.css"> *@
@* <link rel="stylesheet" href="css/normalize.css"> *@

<!-- google font -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,500;0,600;0,700;1,300&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
@* <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.1/css/fontawesome.min.css" integrity="sha384-QYIZto+st3yW+o8+5OHfT6S482Zsvz2WfOzpFSXMF9zqeLcFV0/wlZpMtyFcZALm" crossorigin="anonymous"> *@
@* <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"> *@

@* <script src="_content/Microsoft.AspNetCore.Components.Web.Extensions/script.js"></script> *@


<div class="button-container">
    <button class="btn btn-outline-primary" @onclick="@(() => { NavManager.NavigateTo("/announcement/create"); })">Adauga anunt</button>
</div>
<div class="search-container">
    <div>
        <i class="fa-solid fa-magnifying-glass"></i>
        <input @bind="searchText" placeholder="Cauta">
        <button @onclick="Search">Cauta</button>
    </div>
</div>

@* <div class="search-price-container"> *@
@*     <div> *@
@*         <i class="fa-solid fa-magnifying-glass"></i> *@
@*         <input type="number" @bind="priceFilter" placeholder="Pret"> *@
@*         <button @onclick="FilterPrice">Cauta</button> *@
@*     </div> *@
@* </div> *@


<div class="search-price-container">
    <div>
        <i class="fa-solid fa-magnifying-glass"></i>
        <input type="number" @bind="minPrice" @bind:event="oninput" placeholder="Minim">
        <input type="number" @bind="maxPrice" @bind:event="oninput" placeholder="Maxim">
        <button @onclick="FilterPrice">Cauta</button>

    </div>
</div>


@* <div class="container mt-5"> *@
@*         <div class="filter-container"> *@
@*             <div class="row"> *@
@*                 <div class="col-md-4 mb-3"> *@
@*                     <label for="priceFilter">Price: </label> *@
@*                     <select class="form-control" id="priceFilter"> *@
@*                         <option value="0-50000">$0 - $50,000</option> *@
@*                         <option value="50000-100000">$50,000 - $100,000</option> *@
@*                         <option value="100000-200000">$100,000 - $200,000</option> *@
@*                         <!-- Add more ranges as needed --> *@
@*                     </select> *@
@* *@
@*                 </div> *@
@* *@
@*             </div> *@
@* $1$              #1# *@
@* $1$             <div class="col-md-4 mb-3"> #1# *@
@* $1$                                 <label for="roomsFilter">Rooms:</label> #1# *@
@* $1$                                 <select class="form-control" id="roomsFilter"> #1# *@
@* $1$                                     <option value="1">1</option> #1# *@
@* $1$                                     <option value="2">2</option> #1# *@
@* $1$                                     <option value="3">3</option> #1# *@
@* $1$                                     <option value="4+">4+</option> #1# *@
@* $1$                                 </select> #1# *@
@* $1$                             </div> #1# *@
@* $1$             <div class="col-md-4 mb-3"> #1# *@
@* $1$                 <label for="typeFilter">Type:</label> #1# *@
@* $1$                 <select class="form-control" id="typeFilter"> #1# *@
@* $1$                     <option value="apartment">Apartment</option> #1# *@
@* $1$                     <option value="house">House</option> #1# *@
@* $1$                 </select> #1# *@
@* $1$             </div> #1# *@
@* $1$              #1# *@
@* $1$             <div class="row"> #1# *@
@* $1$                 <div class="col-md-4 mb-3"> #1# *@
@* $1$                     <label for="landAreaFilter">Land Area (sq ft):</label> #1# *@
@* $1$                     <input type="number" class="form-control" id="landAreaFilter" placeholder="Enter Land Area"> #1# *@
@* $1$                 </div> #1# *@
@* $1$                 <div class="col-md-4 mb-3"> #1# *@
@* $1$                     <label for="floorFilter">Apartment Floor:</label> #1# *@
@* $1$                     <input type="number" class="form-control" id="floorFilter" placeholder="Enter Floor"> #1# *@
@* $1$                 </div> #1# *@
@* $1$                 <div class="col-md-4 mb-3"> #1# *@
@* $1$                     <label for="usableAreaFilter">House Usable Area (sq ft):</label> #1# *@
@* $1$                     <input type="number" class="form-control" id="usableAreaFilter" placeholder="Enter Usable Area"> #1# *@
@* $1$                 </div> #1# *@
@* $1$             </div> #1# *@
@* $1$             <div class="row"> #1# *@
@* $1$                 <div class="col-md-8 mb-3"> #1# *@
@* $1$                     <label for="cityFilter">City:</label> #1# *@
@* $1$                     <input type="text" class="form-control" id="cityFilter" placeholder="Enter City"> #1# *@
@* $1$                 </div> #1# *@
@* $1$                 <div class="col-md-4 mb-3"> #1# *@
@* $1$                     <button class="btn btn-primary btn-block">Apply Filter</button> #1# *@
@* $1$                 </div> #1# *@
@* $1$             </div> #1# *@
@*          </div> *@
@*      </div> *@


@* *@
@* <div> *@
@*     <input @bind="startDate" placeholder="Start Date"/> *@
@*     <input @bind="searchText" placeholder="Cauta"/> *@
@*     <button @onclick="Search">Search</button> *@
@* </div> *@


@* <div class="flex flex-row justify-content-between"> *@
@*     $1$ <p style="font-size: 25px">Creeaza anunt</p><br/> #1# *@
@*     <button class="btn btn-outline-primary" @onclick="@(() => { NavManager.NavigateTo("/announcement/create"); })">Anunt nou</button> *@
@*     <br> *@
@*     <br> *@
@* </div> *@


<div class="row">
    @if (announcements.Count == 0)
    {
        <div class="col-12">
            <p class="text-muted">No announcements found. Still loading...</p>
        </div>
    }
    else
    {
    @*     @foreach (var announcement in announcements) *@
    @*     { *@
    @*         <div class="col-md-4 mb-4"> *@
    @*             <div class="card"> *@
    @*                 <img src="https://st3.idealista.it/cms/archivie/styles/idcms_social_large_desktop/public/2018-02/news/luxury.jpg?fv=V7Bci5SA&itok=2qsC_ZxF" class="card-img-top" alt="@announcement.Title"> *@
    @*                 <div class="card-body"> *@
    @*                     <h5 class="card-title">@announcement.Title</h5> *@
    @*                     <p class="card-text">Pret: @announcement.Property.Price Euro</p> *@
    @*                     <p class="card-text">Data inceput: @announcement.StartDate.Date</p> *@
    @*                     <p class="card-text">Data sfarsit: @announcement.EndDate.Date</p> *@
    @*                     <p class="card-text">Descriere: @announcement.Property.Details</p> *@
    @*                     <button class="btn btn-secondary" @onclick="@(() => { NavManager.NavigateTo($"/announcements/{announcement.Id}"); })">Detalii</button> *@
    @*                     <button class="btn btn-danger" @onclick="@(async () => await DeleteCurrentAnnouncementAsync(announcement.Id))">Sterge</button> *@
    @*                 </div> *@
    @*             </div> *@
    @*         </div> *@
    @*     } *@
    @* } *@


        <div class="container">
            <div class="cards">
                @foreach (var announcement in announcements)
                {
                    <section class="card">
                        <figure>
                            <div class="img-overlay hot-home">
                                <img src="https://media-cldnry.s-nbcnews.com/image/upload/t_fit-560w,f_auto,q_auto:best/newscms/2018_30/1355945/home-exterior-today-180726-tease.jpg" alt="Trulli">
                                @* <div class="overlay"> *@
                                @* <a @onclick="@(() => { NavManager.NavigateTo($"/announcements/{announcement.Id}"); })">Detalii </a> *@
                                @* <button class="btn btn-secondary" @onclick="@(() => { NavManager.NavigateTo($"/announcements/{announcement.Id}"); })">Detalii</button> *@
                                @* </div> *@
                                <div class="cont">
                                    <div class="icons-img">
                                        <button>
                                            <i class="fas fa-heart"></i>
                                        </button>
                                        <button>
                                            <i class="fas fa-share"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <figcaption>@announcement.Title</figcaption>
                        </figure>
                        <div class="card-content">
                            <p class="custom-font-details">@announcement.Property.Details</p>

                            <section class="icons-home">
                                <div class="name-icon">
                                    <span>Camere</span>
                                    <div class="icon">
                                        <i class="fas fa-bed"></i>
                                        <span>@announcement.Property.RoomsNumber</span>
                                    </div>
                                </div>
                                <div class="name-icon">
                                    <span>Bai</span>
                                    <div class="icon">
                                        <i class="fas fa-sink"></i>
                                        <span>@announcement.Property.BathroomsNumber</span>
                                    </div>
                                </div>
                                <div class="name-icon">
                                    <span>Suprafata</span>
                                    <div class="icon">
                                        <i class="fas fa-vector-square"></i>
                                        <span>@announcement.Property.HouseUsableArea </span>
                                    </div>
                                </div>
                            </section>
                            <section class="price">
                                <span class="label">Pret</span>
                                <span class="price-value">@announcement.Property.Price EUR</span>
                            </section>
                            <br/>
                            <button class="btn btn-outline-primary" @onclick="@(() => { NavManager.NavigateTo($"/announcements/{announcement.Id}"); })">Detalii</button>
                            @* <br/> *@
                            @* <button class="btn btn-outline-danger" @onclick="@(async () => await DeleteCurrentAnnouncementAsync(announcement.Id))">Sterge</button> *@
                        </div>
                    </section>
                }
            </div>
        </div>
    }
</div>


@code {

    private readonly string startDate = string.Empty;
    private string searchText = string.Empty;
    private string queryString = string.Empty;
    private string queryStringForPrice = string.Empty;
    private List<AnnouncementResponseModel> responseContent = new();
    private double? priceFilter;

    private double? minPrice;
    private double? maxPrice;

    private async Task Search()
    {
        queryString = BuildQueryString(searchText);
        var apiUrl = queryString;

        announcements = await Http.GetFromJsonAsync<List<AnnouncementResponseModel>>(apiUrl);
    }

    private async Task FilterPrice()
    {
        queryStringForPrice = BuildQueryStringForPrice(minPrice, maxPrice);
        var apiUrl = queryStringForPrice;

        announcements = await Http.GetFromJsonAsync<List<AnnouncementResponseModel>>(apiUrl);
    }

    private string BuildQueryString(string searchText)
    {
        var queryBuilder = new StringBuilder("announcement?");

        if (!string.IsNullOrEmpty(startDate))
        {
            queryBuilder.Append($"startDate={startDate}&");
        }

        if (!string.IsNullOrEmpty(searchText))
        {
            queryBuilder.Append($"searchText={searchText}&");
        }

        if (queryBuilder.Length > 0)
        {
            queryBuilder.Length--;
        }

        var apiUrl = "announcement" + (!string.IsNullOrEmpty(queryString) ? "?" + queryString : "");

        return queryBuilder.ToString();
    }

    // private string BuildQueryStringForPrice(double? priceFilter)
    // {
    //     var queryBuilder = new StringBuilder("announcement?");
    //
    //     if (priceFilter.HasValue)
    //     {
    //         queryBuilder.Append($"price={priceFilter.ToString()}&");
    //     }
    //
    //     if (queryBuilder.Length > 0)
    //     {
    //         queryBuilder.Length--;
    //     }
    //
    //     var apiUrl = "announcement" + (!string.IsNullOrEmpty(queryStringForPrice) ? "?" + queryStringForPrice : "");
    //
    //     return queryBuilder.ToString();
    // }

    private string BuildQueryStringForPrice(double? minPrice, double? maxPrice)
    {
        var queryBuilder = new StringBuilder("announcement?");

        if (minPrice.HasValue)
        {
            queryBuilder.Append($"price={minPrice}&");
        }

        if (maxPrice.HasValue)
        {
            queryBuilder.Append($"maxValue={maxPrice}&");
        }

        if (queryBuilder.Length > 0)
        {
            queryBuilder.Length--;
        }

    //     if (minPrice.HasValue && maxPrice.HasValue)
    //     {
    // // Apply additional client-side filtering based on the price range
    //         announcements = announcements.Where(a => a.Property.Price >= minPrice && a.Property.Price <= maxPrice).ToList();
    //       
    //     }
    //     else
    //     {
    //         var apiUrl = "announcement" + (!string.IsNullOrEmpty(queryStringForPrice) ? "?" + queryStringForPrice : "");
    //     }
        return queryBuilder.ToString();
    }


    private AnnouncementResponseModel selectedAnnouncement;
    private List<AnnouncementResponseModel> announcements = new();


    protected override async Task OnInitializedAsync()
    {
    // announcements = await Http.GetFromJsonAsync<List<AnnouncementResponseModel>>("announcement?orderBy=startDate");
        announcements = await Http.GetFromJsonAsync<List<AnnouncementResponseModel>>("announcement");
    }

    private async Task DeleteCurrentAnnouncementAsync(int announcementId)
    {
        await Http.DeleteAsync($"announcement/{announcementId}");

    // SERVER
        announcements = await Http.GetFromJsonAsync<List<AnnouncementResponseModel>>("announcement");
    }

}