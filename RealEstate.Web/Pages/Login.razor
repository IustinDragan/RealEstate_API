@page "/Login"
@using Blazored.LocalStorage
@using RealEstate.Shared.Models.Users
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager

<div class="login-box">
  <h2 >Login</h2>
  <EditForm Model="@requestModel" OnSubmit="HandleSubmitAsync">
      <div class="user-box">
          <label >Username</label>
          <input type="text" name="" required="" @bind-value="requestModel.Username">
      </div>
      <div class="user-box">
          <label>Password</label>
          <input type="password" name="" required="" @bind-value="requestModel.Password">
      </div>
    <button class="btn btn-light" type="submit">
        Submit
    </button>
  </EditForm>
</div>


@code {
    private LoginRequestModel requestModel = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();

        if (authState.User.Identity is not null && authState.User.Identity.IsAuthenticated)
        {
    // Redirect to announcements if user is already authenticated
            NavManager.NavigateTo("/announcements");
        }
    }

    public async Task HandleSubmitAsync()
    {
        var responseHttp = await this.Http.PostAsJsonAsync("users/login", requestModel);

        var response = await responseHttp.Content.ReadFromJsonAsync<LoginResponseModel>();

        await LocalStorage.SetItemAsync("user", response);

        await AuthState.GetAuthenticationStateAsync();
    
    // Redirect to announcements after user is authenticated
        NavManager.NavigateTo("/announcements");
    }
}